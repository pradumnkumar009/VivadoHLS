-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Comp_rgn_et_14 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of Comp_rgn_et_14 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp21_fu_124_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp21_reg_197 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp22_fu_142_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp22_reg_202 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp14_fu_154_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp14_reg_207 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp16_fu_172_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp16_reg_212 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp19_fu_183_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp19_reg_217 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_p_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_p_read1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_p_read2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_p_read3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_p_read4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_p_read5 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_p_read6 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_p_read7 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp24_fu_136_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp23_fu_130_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp15_fu_148_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp18_fu_166_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp17_fu_160_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp20_fu_178_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_188_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_ce) and not((ap_start = ap_const_logic_0)))) then
                ap_port_reg_p_read <= p_read;
                ap_port_reg_p_read1 <= p_read1;
                ap_port_reg_p_read2 <= p_read2;
                ap_port_reg_p_read3 <= p_read3;
                ap_port_reg_p_read4 <= p_read4;
                ap_port_reg_p_read5 <= p_read5;
                ap_port_reg_p_read6 <= p_read6;
                ap_port_reg_p_read7 <= p_read7;
                tmp21_reg_197 <= tmp21_fu_124_p2;
                tmp22_reg_202 <= tmp22_fu_142_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_lv1_1 = ap_CS_fsm_state2))) then
                tmp14_reg_207 <= tmp14_fu_154_p2;
                tmp16_reg_212 <= tmp16_fu_172_p2;
                tmp19_reg_217 <= tmp19_fu_183_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_ce)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_ce) and not((ap_start = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((ap_const_logic_1 = ap_ce)) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((ap_const_logic_1 = ap_ce)) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state3)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_lv1_1 = ap_CS_fsm_state3)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_ce, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(tmp19_reg_217) + unsigned(tmp_fu_188_p2));
    tmp14_fu_154_p2 <= std_logic_vector(unsigned(tmp15_fu_148_p2) + unsigned(ap_port_reg_p_read));
    tmp15_fu_148_p2 <= std_logic_vector(unsigned(ap_port_reg_p_read1) + unsigned(ap_port_reg_p_read2));
    tmp16_fu_172_p2 <= std_logic_vector(unsigned(tmp18_fu_166_p2) + unsigned(tmp17_fu_160_p2));
    tmp17_fu_160_p2 <= std_logic_vector(unsigned(ap_port_reg_p_read3) + unsigned(ap_port_reg_p_read4));
    tmp18_fu_166_p2 <= std_logic_vector(unsigned(ap_port_reg_p_read5) + unsigned(ap_port_reg_p_read6));
    tmp19_fu_183_p2 <= std_logic_vector(unsigned(tmp22_reg_202) + unsigned(tmp20_fu_178_p2));
    tmp20_fu_178_p2 <= std_logic_vector(unsigned(tmp21_reg_197) + unsigned(ap_port_reg_p_read7));
    tmp21_fu_124_p2 <= std_logic_vector(unsigned(p_read8) + unsigned(p_read9));
    tmp22_fu_142_p2 <= std_logic_vector(unsigned(tmp24_fu_136_p2) + unsigned(tmp23_fu_130_p2));
    tmp23_fu_130_p2 <= std_logic_vector(unsigned(p_read10) + unsigned(p_read11));
    tmp24_fu_136_p2 <= std_logic_vector(unsigned(p_read12) + unsigned(p_read13));
    tmp_fu_188_p2 <= std_logic_vector(unsigned(tmp16_reg_212) + unsigned(tmp14_reg_207));
end behav;
