-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Comp_rgn_et is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    arr_i_0_read : IN STD_LOGIC_VECTOR (15 downto 0);
    arr_i_1_read : IN STD_LOGIC_VECTOR (15 downto 0);
    arr_i_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
    arr_i_3_read : IN STD_LOGIC_VECTOR (15 downto 0);
    arr_i_4_read : IN STD_LOGIC_VECTOR (15 downto 0);
    arr_i_5_read : IN STD_LOGIC_VECTOR (15 downto 0);
    arr_i_6_read : IN STD_LOGIC_VECTOR (15 downto 0);
    arr_i_7_read : IN STD_LOGIC_VECTOR (15 downto 0);
    arr_i_8_read : IN STD_LOGIC_VECTOR (15 downto 0);
    arr_i_9_read : IN STD_LOGIC_VECTOR (15 downto 0);
    arr_i_10_read : IN STD_LOGIC_VECTOR (15 downto 0);
    arr_i_11_read : IN STD_LOGIC_VECTOR (15 downto 0);
    arr_i_12_read : IN STD_LOGIC_VECTOR (15 downto 0);
    arr_i_13_read : IN STD_LOGIC_VECTOR (15 downto 0);
    arr_i_14_read : IN STD_LOGIC_VECTOR (15 downto 0);
    arr_i_15_read : IN STD_LOGIC_VECTOR (15 downto 0);
    arr_i_16_read : IN STD_LOGIC_VECTOR (15 downto 0);
    arr_i_17_read : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of Comp_rgn_et is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp14_fu_162_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp14_reg_250 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp6_fu_174_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp6_reg_255 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp10_fu_180_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp10_reg_260 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp11_fu_186_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp11_reg_265 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp12_fu_198_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp12_reg_270 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_215_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_reg_275 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp4_fu_227_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_reg_280 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp8_fu_236_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp8_reg_285 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_arr_i_0_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_arr_i_1_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_arr_i_2_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_arr_i_3_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_arr_i_4_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_arr_i_5_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_arr_i_6_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_arr_i_7_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_arr_i_8_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_arr_i_9_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_arr_i_10_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_arr_i_11_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_arr_i_12_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_arr_i_13_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_arr_i_14_read : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp15_fu_156_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp7_fu_168_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp13_fu_192_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_fu_209_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_fu_203_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_fu_221_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp9_fu_232_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_fu_241_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                ap_port_reg_arr_i_0_read <= arr_i_0_read;
                ap_port_reg_arr_i_10_read <= arr_i_10_read;
                ap_port_reg_arr_i_11_read <= arr_i_11_read;
                ap_port_reg_arr_i_12_read <= arr_i_12_read;
                ap_port_reg_arr_i_13_read <= arr_i_13_read;
                ap_port_reg_arr_i_14_read <= arr_i_14_read;
                ap_port_reg_arr_i_1_read <= arr_i_1_read;
                ap_port_reg_arr_i_2_read <= arr_i_2_read;
                ap_port_reg_arr_i_3_read <= arr_i_3_read;
                ap_port_reg_arr_i_4_read <= arr_i_4_read;
                ap_port_reg_arr_i_5_read <= arr_i_5_read;
                ap_port_reg_arr_i_6_read <= arr_i_6_read;
                ap_port_reg_arr_i_7_read <= arr_i_7_read;
                ap_port_reg_arr_i_8_read <= arr_i_8_read;
                ap_port_reg_arr_i_9_read <= arr_i_9_read;
                tmp14_reg_250 <= tmp14_fu_162_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                tmp10_reg_260 <= tmp10_fu_180_p2;
                tmp11_reg_265 <= tmp11_fu_186_p2;
                tmp12_reg_270 <= tmp12_fu_198_p2;
                tmp6_reg_255 <= tmp6_fu_174_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                tmp1_reg_275 <= tmp1_fu_215_p2;
                tmp4_reg_280 <= tmp4_fu_227_p2;
                tmp8_reg_285 <= tmp8_fu_236_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state4)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(tmp8_reg_285) + unsigned(tmp_fu_241_p2));
    tmp10_fu_180_p2 <= std_logic_vector(unsigned(ap_port_reg_arr_i_9_read) + unsigned(ap_port_reg_arr_i_10_read));
    tmp11_fu_186_p2 <= std_logic_vector(unsigned(ap_port_reg_arr_i_11_read) + unsigned(ap_port_reg_arr_i_12_read));
    tmp12_fu_198_p2 <= std_logic_vector(unsigned(tmp14_reg_250) + unsigned(tmp13_fu_192_p2));
    tmp13_fu_192_p2 <= std_logic_vector(unsigned(ap_port_reg_arr_i_13_read) + unsigned(ap_port_reg_arr_i_14_read));
    tmp14_fu_162_p2 <= std_logic_vector(unsigned(tmp15_fu_156_p2) + unsigned(arr_i_15_read));
    tmp15_fu_156_p2 <= std_logic_vector(unsigned(arr_i_16_read) + unsigned(arr_i_17_read));
    tmp1_fu_215_p2 <= std_logic_vector(unsigned(tmp3_fu_209_p2) + unsigned(tmp2_fu_203_p2));
    tmp2_fu_203_p2 <= std_logic_vector(unsigned(ap_port_reg_arr_i_0_read) + unsigned(ap_port_reg_arr_i_1_read));
    tmp3_fu_209_p2 <= std_logic_vector(unsigned(ap_port_reg_arr_i_2_read) + unsigned(ap_port_reg_arr_i_3_read));
    tmp4_fu_227_p2 <= std_logic_vector(unsigned(tmp6_reg_255) + unsigned(tmp5_fu_221_p2));
    tmp5_fu_221_p2 <= std_logic_vector(unsigned(ap_port_reg_arr_i_4_read) + unsigned(ap_port_reg_arr_i_5_read));
    tmp6_fu_174_p2 <= std_logic_vector(unsigned(tmp7_fu_168_p2) + unsigned(ap_port_reg_arr_i_6_read));
    tmp7_fu_168_p2 <= std_logic_vector(unsigned(ap_port_reg_arr_i_7_read) + unsigned(ap_port_reg_arr_i_8_read));
    tmp8_fu_236_p2 <= std_logic_vector(unsigned(tmp12_reg_270) + unsigned(tmp9_fu_232_p2));
    tmp9_fu_232_p2 <= std_logic_vector(unsigned(tmp11_reg_265) + unsigned(tmp10_reg_260));
    tmp_fu_241_p2 <= std_logic_vector(unsigned(tmp4_reg_280) + unsigned(tmp1_reg_275));
end behav;
